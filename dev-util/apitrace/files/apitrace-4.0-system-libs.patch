diff --git a/CMakeLists.txt b/CMakeLists.txt
index b15cbb5..4344687 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -388,44 +388,14 @@
 # - on unices to prevent symbol collisions when tracing applications that link
 # against other versions of these libraries
 
-if (NOT ENABLE_STATIC_SNAPPY)
-    find_package (SNAPPY)
-endif ()
-if (ENABLE_STATIC_SNAPPY OR NOT SNAPPY_FOUND)
-    message (STATUS "Using bundled SNAPPY")
-    set (SNAPPY_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/snappy)
-    set (SNAPPY_LIBRARIES snappy_bundled)
-    add_subdirectory (thirdparty/snappy)
-endif ()
+find_package(SNAPPY REQUIRED)
 include_directories (${SNAPPY_INCLUDE_DIRS})
 
-if (NOT WIN32)
-    # zlib 1.2.4-1.2.5 made it impossible to read the last block of incomplete
-    # gzip traces (e.g., apitrace-tests/traces/zlib-no-eof.trace).
-    find_package (ZLIB 1.2.6)
-endif ()
-if (NOT ZLIB_FOUND)
-    message (STATUS "Using bundled ZLIB")
-    set (ZLIB_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/zlib)
-    set (ZLIB_LIBRARIES z_bundled)
-    add_subdirectory (thirdparty/zlib)
-endif ()
+find_package (ZLIB 1.2.6 REQUIRED)
 include_directories (${ZLIB_INCLUDE_DIRS})
 
-# FindPNG.cmake will search ZLIB internally (without requiring any particular
-# version), adding its include dirs and libraries, and overwriting ZLIB_FOUND.
-# So if the system's ZLIB was did not meet the our requirements, then there's
-# no safe way to use the system's PNG library.
-if (NOT WIN32 AND ZLIB_FOUND)
-    find_package (PNG)
-endif ()
-if (NOT PNG_FOUND)
-    message (STATUS "Using bundled PNG")
-    set (PNG_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/libpng)
-    set (PNG_DEFINITIONS "")
-    set (PNG_LIBRARIES png_bundled)
-    add_subdirectory (thirdparty/libpng)
-endif ()
+find_package (PNG REQUIRED)
+include_directories (${PNG_INCLUDE_DIRS})
 
 if (MSVC)
     add_subdirectory (thirdparty/getopt)
